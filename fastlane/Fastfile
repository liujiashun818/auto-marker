# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.39.2"

default_platform :android

# for Android
platform :android do
  before_all do
    gradle(task: 'clean', project_dir: ENV['ANDROID_PROJECT_DIR'])
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test", project_dir: ENV['ANDROID_PROJECT_DIR'])
  end

  desc "debug: Submit a new Debug Build to Pgyer"
  lane :debug do
    gradle(task: "assembleDebug", project_dir: ENV['ANDROID_PROJECT_DIR'])
    pgyer(api_key: ENV['PGY_API_KEY'], user_key: ENV['PGY_USER_KEY'])
  end

  desc "Test1: Submit a new Test1 Build to Pgyer"
  lane :test1 do
    gradle(task: "assembleDtest1", project_dir: ENV['ANDROID_PROJECT_DIR'])
    pgyer(api_key: ENV['PGY_API_KEY'], user_key: ENV['PGY_USER_KEY'])
  end

  desc "Test2: Submit a new Test2 Build to Pgyer"
  lane :test2 do
    gradle(task: "assembleDtest2", project_dir: ENV['ANDROID_PROJECT_DIR'])
    pgyer(api_key: ENV['PGY_API_KEY'], user_key: ENV['PGY_USER_KEY'])
  end

  desc "Beta: Submit a new Beta Build to Pgyer"
  lane :beta do
    gradle(task: "assembleBeta", project_dir: ENV['ANDROID_PROJECT_DIR'])
    pgyer(api_key: ENV['PGY_API_KEY'], user_key: ENV['PGY_USER_KEY'])
  end

  desc "Release: Package a new release version"
  lane :release do
    gradle(task: "assembleRelease", project_dir: ENV['ANDROID_PROJECT_DIR'])
    pgyer(api_key: ENV['PGY_API_KEY'], user_key: ENV['PGY_USER_KEY'])

    # 生成iOS和Android各自的source maps文件
    # sh("./bundle.sh")
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

# for iOS
platform :ios do
  before_all do

  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "test1: 打包并上传到蒲公英"
    desc "This will also make sure the profile is up to date"
    lane :test1 do
      # increment_build_number
      gym(
          configuration: 'Test1',
          scheme: 'DaotianArtificer Test1',
          project: ENV['IOS_PROJECT'],
          output_name: 'T1水稻技师版',
          clean: true,
          silent: true,
          include_bitcode: true,
          export_method: 'ad-hoc', # Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id
      )
      pgyer(api_key: ENV['PGY_API_KEY'], user_key: ENV['PGY_USER_KEY'])
    end

    desc "test2: 打包并上传到蒲公英"
    desc "This will also make sure the profile is up to date"
    lane :test2 do
      # increment_build_number
      gym(
          configuration: 'Test2',
          scheme: 'DaotianArtificer Test2',
          project: ENV['IOS_PROJECT'],
          output_name: 'T2水稻技师版',
          clean: true,
          silent: true,
          include_bitcode: true,
          export_method: 'ad-hoc', # Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id
      )
      pgyer(api_key: ENV['PGY_API_KEY'], user_key: ENV['PGY_USER_KEY'])
    end

    desc "Submit a new Beta Build to Apple TestFlight"
    desc "This will also make sure the profile is up to date"
    lane :beta do
      # increment_build_number
      gym(
          configuration: 'Beta',
          scheme: 'DaotianArtificer Beta',
          project: ENV['IOS_PROJECT'],
          output_name: 'B水稻技师版',
          clean: true,
          silent: true,
          include_bitcode: true,
          export_method: 'ad-hoc', # Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id
      )
      pgyer(api_key: ENV['PGY_API_KEY'], user_key: ENV['PGY_USER_KEY'])
    end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    gym # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  desc "sync dsyms files to bugsnag"
  lane :refresh_dsyms do
    download_dsyms(version: "1.0.0")     # Download dSYM files from iTC
    upload_symbols_to_bugsnag            # Upload them to Bugsnag
    clean_build_artifacts                # Delete the local dSYM files
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://github.com/fastlane/fastlane#metrics
