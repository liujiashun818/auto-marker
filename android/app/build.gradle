apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        bundleInDebug  : true,
        bundleInDtest1 : true,
        bundleInDtest2 : true,
        bundleInBeta   : true,
        bundleInRelease: true,
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.shuidao.daotian.automarket"
        vectorDrawables.useSupportLibrary = true
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 120
        versionName "1.2.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
        debug {
            storeFile file(MYAPP_DEBUG_STORE_FILE)
            storePassword MYAPP_DEBUG_STORE_PASSWORD
            keyAlias MYAPP_DEBUG_KEY_ALIAS
            keyPassword MYAPP_DEBUG_KEY_PASSWORD
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        // Backup
        // release {
        //     minifyEnabled enableProguardInReleaseBuilds
        //     proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        // }
        // 发布版
        release {
            minifyEnabled false
            // proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            //打包模式：Release
            buildConfigField("int", "__PACKAGE_MODE", "0")
            //小米推送
            buildConfigField("String", "__MIPUSH_APP_ID", "\"2882303761517559716\"")
            buildConfigField("String", "__MIPUSH_APP_KEY", "\"5831755944716\"")
            //应用程序名称
            resValue("string", "app_name", "汽车超市")
            manifestPlaceholders = [
                    PACKAGE_NAME: "com.shuidao.daotian.automarket",
                    //Umeng友盟统计
                    UMENG_APPKEY_VALUE : "592900a71061d209c3000ea8",
                    UMENG_CHANNEL_VALUE: "Android"
            ]
        }
        // 开发测试版
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            //打包模式：Debug
            buildConfigField("int", "__PACKAGE_MODE", "2")
            //小米推送
            buildConfigField("String", "__MIPUSH_APP_ID", "\"2882303761517559717\"")
            buildConfigField("String", "__MIPUSH_APP_KEY", "\"5971755951717\"")
            //应用程序名称
            resValue("string", "app_name", "D汽车超市")
            manifestPlaceholders = [
                    PACKAGE_NAME: "com.shuidao.daotian.automarket.debug",
                    //Umeng友盟统计
                    UMENG_APPKEY_VALUE : "592900dc4544cb56b5000fef",
                    UMENG_CHANNEL_VALUE: "Android debug"
            ]
        }
        // 回归测试版
        beta {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.debug
            applicationIdSuffix ".beta"
            //打包模式：Beta
            buildConfigField("int", "__PACKAGE_MODE", "1")
            //小米推送
            buildConfigField("String", "__MIPUSH_APP_ID", "\"2882303761517559718\"")
            buildConfigField("String", "__MIPUSH_APP_KEY", "\"5781755998718\"")
            //应用程序名称
            resValue("string", "app_name", "B汽车超市")
            manifestPlaceholders = [
                    PACKAGE_NAME: "com.shuidao.daotian.automarket.beta",
                    //Umeng友盟统计
                    UMENG_APPKEY_VALUE : "592900dc4544cb56b5000fef",
                    UMENG_CHANNEL_VALUE: "Android beta"
            ]
        }
        // 测试版T1
        dtest1 {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.debug
            applicationIdSuffix ".test1"
            //打包模式：Test1
            buildConfigField("int", "__PACKAGE_MODE", "3")
            //小米推送
            buildConfigField("String", "__MIPUSH_APP_ID", "\"2882303761517559719\"")
            buildConfigField("String", "__MIPUSH_APP_KEY", "\"5201755960719\"")
            //应用程序名称
            resValue("string", "app_name", "T1汽车超市")
            manifestPlaceholders = [
                    PACKAGE_NAME: "com.shuidao.daotian.automarket.test1",
                    //Umeng友盟统计
                    UMENG_APPKEY_VALUE : "592900dc4544cb56b5000fef",
                    UMENG_CHANNEL_VALUE: "Android test1"
            ]
        }
        // 测试版T2
        dtest2 {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.debug
            applicationIdSuffix ".test2"
            //打包模式：Test2
            buildConfigField("int", "__PACKAGE_MODE", "4")
            //小米推送
            buildConfigField("String", "__MIPUSH_APP_ID", "\"2882303761517559720\"")
            buildConfigField("String", "__MIPUSH_APP_KEY", "\"5291755981720\"")
            //应用程序名称
            resValue("string", "app_name", "T2汽车超市")
            manifestPlaceholders = [
                    PACKAGE_NAME: "com.shuidao.daotian.automarket.test2",
                    //Umeng友盟统计
                    UMENG_APPKEY_VALUE : "592900dc4544cb56b5000fef",
                    UMENG_CHANNEL_VALUE: "Android test2"
            ]
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-camera')
    compile project(':react-native-wechat')
    compile project(':react-native-view-shot')
    compile project(':react-native-picker')
    compile project(':react-native-spinkit')
    compile project(':react-native-permissions')
    compile project(':react-native-fs')
    compile project(':react-native-image-crop-picker')
    compile project(':bugsnag-react-native')
    compile project(':react-native-mipush')
    compile project(':react-native-vector-icons')
    compile project(':react-native-image-picker')
    compile project(':react-native-device-info')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.facebook.fresco:animated-gif:1.0.1"
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile 'com.umeng.analytics:analytics:latest.integration'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
